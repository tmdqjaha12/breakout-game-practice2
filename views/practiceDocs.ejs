<!DOCTYPE html>
<html>
  <head>
    <!-- <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js"></script> -->
    <!-- <script src="//cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.js"></script> -->
    <!-- <script src="//cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/phaser@3.51.0/dist/phaser.js"></script> -->
    <script src="//cdn.jsdelivr.net/npm/phaser@3.51.0/dist/phaser.min.js"></script>
  </head>
  <body>
    <div>
      <h1><a href="https://phaser.io/download/stable">다운로드 link</a></h1>
      <h1><a href="https://newdocs.phaser.io/docs/3.55.2">docs</a></h1>
      <h1>
        <a href=" https://photonstorm.github.io/phaser3-docs/index.html"
          >api docs</a
        >
      </h1>
    </div>
    <%- include('./layout/link') %>
    <script>
      /**
       * 1. type: AUTO(follow browser), CANVAS, WEBGL (게임을 렌더링할 ctx를 선택)
       * 2. scene: 게임내 물체들이 존재하며 서로 상호작용하는 공간. (지형, 아이템, 플레이어 카메라 등 구성)
       * 2. 1) preload: scene이 호출되기 전
       * 2. 2) create: scene이 생성될 때 (호출 순서대로 배치)
       * 2. 3) update: 갱신될 때
       */
      var config = {
        type: Phaser.AUTO,
        width: 800,
        height: 600,
        physics: {
          default: "arcade",
          arcade: {
            gravity: { y: 200 },
          },
        },
        scene: {
          preload: preload,
          create: create,
        },
      };

      var game = new Phaser.Game(config);

      function preload() {
        this.load.setBaseURL("http://labs.phaser.io");

        this.load.image("sky", "assets/skies/space3.png");
        this.load.image("logo", "assets/sprites/phaser3-logo.png");
        this.load.image("red", "assets/particles/red.png");
      }

      function create() {
        this.add.image(400, 300, "sky");

        var particles = this.add.particles("red");

        var emitter = particles.createEmitter({
          speed: 100,
          scale: { start: 1, end: 0 },
          blendMode: "ADD",
        });

        var logo = this.physics.add.image(400, 100, "logo");

        logo.setVelocity(100, 200);
        logo.setBounce(1, 1);
        logo.setCollideWorldBounds(true);

        emitter.startFollow(logo);
      }
    </script>
  </body>
</html>
